RAFANA_ADMIN_PASSWD ?= ""
HARBOR_ADMIN_PASSWD ?= ""
LETSENCRYPT_EMAIL ?= letsencrypt@example.com
DNS_DOMAIN ?= example.com
METALLB_RANGE_START ?= 192.168.122.200
METALLB_RANGE_END ?= 192.168.122.209
OAUTH_CLIENT_ID ?= abc
OAUTH_CLIENT_SECRET ?= abc
OAUTH_ALLOWED_ORGS ?= abc

HELMSMAN ?= helmsman
#HELMSMAN ?= docker run -e KUBECONFIG -v $(shell pwd):/tmp --rm -it praqma/helmsman:v1.13.0 helmsman

# Path where YAMLs are rendered from Helm charts
RENDER_PATH = rendered

# Direct deployment with Helm2/Helmsman
.PHONY: all-direct
all-direct: infra-init tiller-deploy-direct nfs-server-storage-provisioner-deploy-direct metallb-deploy-direct cert-manager-deploy-direct prometheus-deploy-direct grafana-deploy-direct loki-deploy-direct metrics-server-deploy-direct prometheus-adapter-deploy-direct


# Render and deploy as separate stages
# All, except Tiller
.PHONY: all-render
all-render: nfs-server-storage-provisioner-render metallb-render cert-manager-render prometheus-render grafana-render loki-render metrics-server-render prometheus-adapter-render audit-static-yaml

.PHONY: all-deploy
all-deploy: infra-init nfs-server-storage-provisioner-deploy metallb-deploy cert-manager-deploy prometheus-deploy grafana-deploy loki-deploy metrics-server-deploy prometheus-adapter-deploy

# Direct deployment with Helm3/Helmsman
.PHONY: all-helm3-direct
all-helm3-direct: infra-init nfs-server-storage-provisioner-deploy-direct metallb-deploy-direct cert-manager-deploy-direct prometheus-deploy-direct grafana-deploy-direct loki-deploy-direct metrics-server-deploy-direct prometheus-adapter-deploy-direct


.PHONY:wait
wait:
	bash -c 'until kubectl get nodes |grep master |grep Ready; do sleep 1; done'


.PHONY: all-istio
all-istio: infra-init tiller-deploy-direct nfs-server-storage-provisioner-deploy-direct metallb-deploy-direct cert-manager-deploy-direct prometheus-deploy-direct grafana-deploy-direct loki-deploy-direct metrics-server-deploy-direct prometheus-adapter-deploy-direct istio-deploy-direct infra-init-post

.PHONY: infra-init
infra-init: grafana-init metallb-init

############################
Get Kubernetes health dashboard from https://github.com/MichaelVL/kubernetes-grafana-dashboard
dashboard-kubernetes-health.json:
	curl -sO https://raw.githubusercontent.com/MichaelVL/kubernetes-grafana-dashboard/master/dashboards/dashboard-kubernetes-health.json

############################
.PHONY: grafana-init
grafana-init: dashboard-kubernetes-health.json
	-kubectl create ns metrics
	-kubectl -nmetrics delete configmap dashboard
	kubectl -nmetrics create configmap dashboard --from-file dashboard-kubernetes-health.json
	kubectl -nmetrics label configmap dashboard grafana_dashboard=1

############################
# MetalLB config can be deployed after MetalLB
.PHONY: metallb-init
metallb-init:
	-kubectl create ns metallb
	cat deploy/static-yaml/metallb-layer2.yaml | METALLB_RANGE_START=$(METALLB_RANGE_START) METALLB_RANGE_END=$(METALLB_RANGE_END) envsubst | kubectl -nmetallb apply -f -

############################
.PHONY: tiller-deploy-direct
tiller-deploy-direct:
	$(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/tiller.yaml

############################
.PHONY: metallb-render
metallb-render:
	deploy/helm2yaml.sh deploy/metallb.yaml $(RENDER_PATH)

.PHONY: metallb-deploy
metallb-deploy:
	deploy/manifest_deploy.sh $(RENDER_PATH) metallb

.PHONY: metallb-deploy-direct
metallb-deploy-direct:
	$(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/metallb.yaml

############################
.PHONY: cert-manager-render
cert-manager-render:
	deploy/helm2yaml.sh deploy/cert-manager.yaml $(RENDER_PATH)

.PHONY: cert-manager-deploy
cert-manager-deploy:
	deploy/manifest_deploy.sh $(RENDER_PATH) cert-manager

.PHONY: cert-manager-deploy-direct
cert-manager-deploy-direct:
	$(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/cert-manager.yaml

############################
.PHONY: prometheus-render
prometheus-render:
	deploy/helm2yaml.sh deploy/prometheus.yaml $(RENDER_PATH)

.PHONY: prometheus-deploy
prometheus-deploy:
	deploy/manifest_deploy.sh $(RENDER_PATH) prometheus

.PHONY: prometheus-deploy-direct
prometheus-deploy-direct:
	-$(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/prometheus.yaml

############################
.PHONY: grafana-render
grafana-render:
	deploy/helm2yaml.sh deploy/grafana.yaml $(RENDER_PATH)

.PHONY: grafana-deploy
grafana-deploy:
	OAUTH_CLIENT_ID=$(OAUTH_CLIENT_ID) OAUTH_CLIENT_SECRET=$(OAUTH_CLIENT_SECRET) OAUTH_ALLOWED_ORGS=$(OAUTH_ALLOWED_ORGS) GRAFANA_ADMIN_PASSWD=$(GRAFANA_ADMIN_PASSWD) DNS_DOMAIN=$(DNS_DOMAIN) deploy/manifest_deploy.sh $(RENDER_PATH) grafana

.PHONY: grafana-deploy-direct
grafana-deploy-direct:
	OAUTH_CLIENT_ID=$(OAUTH_CLIENT_ID) OAUTH_CLIENT_SECRET=$(OAUTH_CLIENT_SECRET) OAUTH_ALLOWED_ORGS=$(OAUTH_ALLOWED_ORGS) GRAFANA_ADMIN_PASSWD=$(GRAFANA_ADMIN_PASSWD) DNS_DOMAIN=$(DNS_DOMAIN) $(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/grafana.yaml

############################
.PHONY: loki-render
loki-render:
	deploy/helm2yaml.sh deploy/loki.yaml $(RENDER_PATH)
	deploy/helm2yaml.sh deploy/promtail.yaml $(RENDER_PATH)

.PHONY: loki-deploy
loki-deploy:
	deploy/manifest_deploy.sh $(RENDER_PATH) loki
	deploy/manifest_deploy.sh $(RENDER_PATH) promtail

.PHONY: loki-deploy-direct
loki-deploy-direct:
	$(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/loki.yaml -f deploy/promtail.yaml

############################
.PHONY: metrics-server-render
metrics-server-render:
	deploy/helm2yaml.sh deploy/metrics-server.yaml $(RENDER_PATH)

.PHONY: metrics-server-deploy
metrics-server-deploy:
	deploy/manifest_deploy.sh $(RENDER_PATH) metrics-server

.PHONY: metrics-server-deploy-direct
metrics-server-deploy-direct:
	$(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/metrics-server.yaml

############################
.PHONY: contour-deploy-direct
contour-deploy-direct:
	$(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/contour.yaml

############################
.PHONY: traefik-deploy-direct
traefik-deploy-direct:
	$(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/traefik.yaml

############################
.PHONY: istio-deploy-direct
istio-deploy-direct:
	$(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/istio.yaml

############################
.PHONY: prometheus-adapter-render
prometheus-adapter-render:
	deploy/helm2yaml.sh deploy/prometheus-adapter.yaml $(RENDER_PATH)

.PHONY: prometheus-adapter-deploy
prometheus-adapter-deploy:
	deploy/manifest_deploy.sh $(RENDER_PATH) prometheus-adapter

.PHONY: prometheus-adapter-deploy-direct
prometheus-adapter-deploy-direct:
	$(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/prometheus-adapter.yaml

############################
# This depends on Istio CRDs deployed above
.PHONY: infra-init-post
infra-init-post:
	kubectl -nmetrics apply -f deploy/static-yaml/grafana-istio-ingress.yaml

############################
.PHONY: letsencrypt-issuers
letsencrypt-issuers:
	cat deploy/static-yaml/tls-cluster-cert-issuers.yaml | LETSENCRYPT_EMAIL=$(LETSENCRYPT_EMAIL) envsubst | kubectl apply -f -

############################
.PHONY: fluxcd-deploy-direct
fluxcd-deploy-direct:
	$(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/fluxcd.yaml

############################
.PHONY: nfs-server-storage-provisioner-render
nfs-server-storage-provisioner-render:
	deploy/helm2yaml.sh deploy/nfs-server-storage-provisioner.yaml $(RENDER_PATH)

.PHONY: nfs-server-storage-provisioner-deploy
nfs-server-storage-provisioner-deploy:
	NFS_STORAGE_PROVISIONER_HOSTNAME=$(shell kubectl get --no-headers=true no | head -n 1 | cut -f 1 -d' ') deploy/manifest_deploy.sh $(RENDER_PATH) nfs-server-storage-provisioner
	kubectl -n nfs-storage apply -f deploy/static-yaml/nfs-storage-provisioner-pv.yaml

.PHONY: nfs-server-storage-provisioner-deploy-direct
nfs-server-storage-provisioner:
	NFS_STORAGE_PROVISIONER_HOSTNAME=$(shell kubectl get --no-headers=true no | head -n 1 | cut -f 1 -d' ') $(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/nfs-server-storage-provisioner.yaml
	kubectl -n nfs-storage apply -f deploy/static-yaml/nfs-storage-provisioner-pv.yaml

############################
.PHONY: nfs-client-storage-provisioner-render
nfs-client-storage-provisioner-render:
	deploy/helm2yaml.sh deploy/nfs-client-storage-provisioner.yaml $(RENDER_PATH)

.PHONY: nfs-client-storage-provisioner-deploy
nfs-client-storage-provisioner-deploy:
	deploy/manifest_deploy.sh $(RENDER_PATH) nfs-client-storage-provisioner

.PHONY: nfs-client-storage-provisioner
nfs-client-storage-provisioner:
	EXTERNAL_NFS_SERVER=$(EXTERNAL_NFS_SERVER) EXTERNAL_NFS_SERVER_PATH=$(EXTERNAL_NFS_SERVER_PATH) $(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/nfs-client-storage-provisioner.yaml

############################
.PHONY: harbor-deploy-direct
harbor-deploy-direct:
	HARBOR_ADMIN_PASSWD=$(HARBOR_ADMIN_PASSWD) $(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/harbor.yaml

############################
.PHONY: kubernetes-dashboard-deploy-direct
kubernetes-dashboard-deploy-direct:
	$(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/kubernetes-dashboard.yaml

############################
.PHONY: jenkins-deploy-direct
jenkins-deploy-direct:
	$(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/jenkins.yaml
	-kubectl -njenkins create configmap dashboard --from-file jenkins-performance-and-health-overview_rev1.json
	-kubectl -njenkins label configmap dashboard grafana_dashboard=1

############################
.PHONY: oauth2-proxy-deploy-direct
oauth2-proxy-deploy-direct:
	$(HELMSMAN) --no-banner --keep-untracked-releases --apply -f deploy/oauth2-proxy.yaml

############################
STATIC_YAML := $(shell find deploy/static-yaml -type f | sed 's/^(.*)/-f $1/')
.PHONY: audit-static-yaml
audit-static-yaml:
	./deploy/kubeaudit.sh all ${STATIC_YAML} 2> $(RENDER_PATH)/statis-yaml-audit.txt

.PHONY: show-audit-reports
show-audit-reports:
	cat $(RENDER_PATH)/*-audit.txt

.PHONY: clean
clean:
	rm -rf $(RENDER_PATH)
